// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ec2

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "aws:ec2/ami:Ami":
		r, err = NewAmi(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/amiCopy:AmiCopy":
		r, err = NewAmiCopy(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/amiFromInstance:AmiFromInstance":
		r, err = NewAmiFromInstance(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/amiLaunchPermission:AmiLaunchPermission":
		r, err = NewAmiLaunchPermission(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/availabilityZoneGroup:AvailabilityZoneGroup":
		r, err = NewAvailabilityZoneGroup(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/capacityReservation:CapacityReservation":
		r, err = NewCapacityReservation(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/carrierGateway:CarrierGateway":
		r, err = NewCarrierGateway(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/customerGateway:CustomerGateway":
		r, err = NewCustomerGateway(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/dedicatedHost:DedicatedHost":
		r, err = NewDedicatedHost(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/defaultNetworkAcl:DefaultNetworkAcl":
		r, err = NewDefaultNetworkAcl(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/defaultRouteTable:DefaultRouteTable":
		r, err = NewDefaultRouteTable(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/defaultSecurityGroup:DefaultSecurityGroup":
		r, err = NewDefaultSecurityGroup(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/defaultSubnet:DefaultSubnet":
		r, err = NewDefaultSubnet(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/defaultVpc:DefaultVpc":
		r, err = NewDefaultVpc(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions":
		r, err = NewDefaultVpcDhcpOptions(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/egressOnlyInternetGateway:EgressOnlyInternetGateway":
		r, err = NewEgressOnlyInternetGateway(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/eip:Eip":
		r, err = NewEip(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/eipAssociation:EipAssociation":
		r, err = NewEipAssociation(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/fleet:Fleet":
		r, err = NewFleet(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/flowLog:FlowLog":
		r, err = NewFlowLog(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/instance:Instance":
		r, err = NewInstance(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/internetGateway:InternetGateway":
		r, err = NewInternetGateway(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/keyPair:KeyPair":
		r, err = NewKeyPair(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/launchConfiguration:LaunchConfiguration":
		r, err = NewLaunchConfiguration(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/launchTemplate:LaunchTemplate":
		r, err = NewLaunchTemplate(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/localGatewayRoute:LocalGatewayRoute":
		r, err = NewLocalGatewayRoute(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/localGatewayRouteTableVpcAssociation:LocalGatewayRouteTableVpcAssociation":
		r, err = NewLocalGatewayRouteTableVpcAssociation(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/mainRouteTableAssociation:MainRouteTableAssociation":
		r, err = NewMainRouteTableAssociation(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/managedPrefixList:ManagedPrefixList":
		r, err = NewManagedPrefixList(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/natGateway:NatGateway":
		r, err = NewNatGateway(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/networkAcl:NetworkAcl":
		r, err = NewNetworkAcl(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/networkAclRule:NetworkAclRule":
		r, err = NewNetworkAclRule(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/networkInterface:NetworkInterface":
		r, err = NewNetworkInterface(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment":
		r, err = NewNetworkInterfaceAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/networkInterfaceSecurityGroupAttachment:NetworkInterfaceSecurityGroupAttachment":
		r, err = NewNetworkInterfaceSecurityGroupAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/peeringConnectionOptions:PeeringConnectionOptions":
		r, err = NewPeeringConnectionOptions(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/placementGroup:PlacementGroup":
		r, err = NewPlacementGroup(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/proxyProtocolPolicy:ProxyProtocolPolicy":
		r, err = NewProxyProtocolPolicy(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/route:Route":
		r, err = NewRoute(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/routeTable:RouteTable":
		r, err = NewRouteTable(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/routeTableAssociation:RouteTableAssociation":
		r, err = NewRouteTableAssociation(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/securityGroup:SecurityGroup":
		r, err = NewSecurityGroup(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/securityGroupRule:SecurityGroupRule":
		r, err = NewSecurityGroupRule(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/snapshotCreateVolumePermission:SnapshotCreateVolumePermission":
		r, err = NewSnapshotCreateVolumePermission(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/spotDatafeedSubscription:SpotDatafeedSubscription":
		r, err = NewSpotDatafeedSubscription(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/spotFleetRequest:SpotFleetRequest":
		r, err = NewSpotFleetRequest(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/spotInstanceRequest:SpotInstanceRequest":
		r, err = NewSpotInstanceRequest(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/subnet:Subnet":
		r, err = NewSubnet(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/tag:Tag":
		r, err = NewTag(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/trafficMirrorFilter:TrafficMirrorFilter":
		r, err = NewTrafficMirrorFilter(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule":
		r, err = NewTrafficMirrorFilterRule(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/trafficMirrorSession:TrafficMirrorSession":
		r, err = NewTrafficMirrorSession(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/trafficMirrorTarget:TrafficMirrorTarget":
		r, err = NewTrafficMirrorTarget(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/transitGatewayPeeringAttachmentAccepter:TransitGatewayPeeringAttachmentAccepter":
		r, err = NewTransitGatewayPeeringAttachmentAccepter(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/volumeAttachment:VolumeAttachment":
		r, err = NewVolumeAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpc:Vpc":
		r, err = NewVpc(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpcDhcpOptions:VpcDhcpOptions":
		r, err = NewVpcDhcpOptions(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpcDhcpOptionsAssociation:VpcDhcpOptionsAssociation":
		r, err = NewVpcDhcpOptionsAssociation(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpcEndpoint:VpcEndpoint":
		r, err = NewVpcEndpoint(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification":
		r, err = NewVpcEndpointConnectionNotification(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpcEndpointRouteTableAssociation:VpcEndpointRouteTableAssociation":
		r, err = NewVpcEndpointRouteTableAssociation(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpcEndpointService:VpcEndpointService":
		r, err = NewVpcEndpointService(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpcEndpointServiceAllowedPrinciple:VpcEndpointServiceAllowedPrinciple":
		r, err = NewVpcEndpointServiceAllowedPrinciple(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpcEndpointSubnetAssociation:VpcEndpointSubnetAssociation":
		r, err = NewVpcEndpointSubnetAssociation(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation":
		r, err = NewVpcIpv4CidrBlockAssociation(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpcPeeringConnection:VpcPeeringConnection":
		r, err = NewVpcPeeringConnection(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter":
		r, err = NewVpcPeeringConnectionAccepter(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpnConnection:VpnConnection":
		r, err = NewVpnConnection(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpnConnectionRoute:VpnConnectionRoute":
		r, err = NewVpnConnectionRoute(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpnGateway:VpnGateway":
		r, err = NewVpnGateway(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpnGatewayAttachment:VpnGatewayAttachment":
		r, err = NewVpnGatewayAttachment(ctx, name, nil, pulumi.URN_(urn))
	case "aws:ec2/vpnGatewayRoutePropagation:VpnGatewayRoutePropagation":
		r, err = NewVpnGatewayRoutePropagation(ctx, name, nil, pulumi.URN_(urn))
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	return
}

func init() {
	version, err := aws.PkgVersion()
	if err != nil {
		fmt.Println("failed to determine package version. defaulting to v1: %v", err)
	}
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/ami",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/amiCopy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/amiFromInstance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/amiLaunchPermission",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/availabilityZoneGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/capacityReservation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/carrierGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/customerGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/dedicatedHost",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/defaultNetworkAcl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/defaultRouteTable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/defaultSecurityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/defaultSubnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/defaultVpc",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/defaultVpcDhcpOptions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/egressOnlyInternetGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/eip",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/eipAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/fleet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/flowLog",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/instance",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/internetGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/keyPair",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/launchConfiguration",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/launchTemplate",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/localGatewayRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/localGatewayRouteTableVpcAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/mainRouteTableAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/managedPrefixList",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/natGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/networkAcl",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/networkAclRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/networkInterface",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/networkInterfaceAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/networkInterfaceSecurityGroupAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/peeringConnectionOptions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/placementGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/proxyProtocolPolicy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/route",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/routeTable",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/routeTableAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/securityGroup",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/securityGroupRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/snapshotCreateVolumePermission",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/spotDatafeedSubscription",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/spotFleetRequest",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/spotInstanceRequest",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/subnet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/tag",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/trafficMirrorFilter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/trafficMirrorFilterRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/trafficMirrorSession",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/trafficMirrorTarget",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/transitGatewayPeeringAttachmentAccepter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/volumeAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpc",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpcDhcpOptions",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpcDhcpOptionsAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpcEndpoint",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpcEndpointConnectionNotification",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpcEndpointRouteTableAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpcEndpointService",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpcEndpointServiceAllowedPrinciple",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpcEndpointSubnetAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpcIpv4CidrBlockAssociation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpcPeeringConnection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpcPeeringConnectionAccepter",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpnConnection",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpnConnectionRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpnGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpnGatewayAttachment",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"aws",
		"ec2/vpnGatewayRoutePropagation",
		&module{version},
	)
}
